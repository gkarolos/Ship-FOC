# Importing necessary libraries
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split, cross_val_score, KFold
from sklearn.metrics import mean_squared_error, mean_absolute_error, explained_variance_score, r2_score
from keras.models import Sequential
from keras.layers import Dense
from keras.optimizers import Adam
from google.colab import files

# Upload the data file
uploaded = files.upload()

# Load the dataset
data = pd.read_excel(list(uploaded.keys())[0])

# Load input data
input_data = pd.read_excel('raw_data.xlsx')
target_data = pd.read_excel('fuel_consumption.xlsx')

# Aggregate minute-level input data to daily-level
input_data_daily = input_data.resample('D', on='date').mean()

# Merge input data with target data based on date
merged_data = pd.merge(input_data_daily, target_data, on='date')

# Assuming you have additional columns for each engine's data in input_data
# You can include them in the features X
X = merged_data[['wind_speed', 'ship_speed', 'me1_rpm', 'me2_rpm', 'me3_rpm', 'me4_rpm', 'me1_power', 'me2_power', 'me3_power', 'me4_power']]
y = merged_data['fuel_consumption']

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Define the Keras model
def create_model():
    model = Sequential([
        Dense(64, input_dim=X_train.shape[1], activation='relu'),
        Dense(1)
    ])
    optimizer = Adam(learning_rate=0.001)  # Use Adam optimizer
    model.compile(loss='mean_squared_error', optimizer=optimizer)
    return model

# Train the final model
final_model = create_model()
final_model.fit(X_train, y_train, epochs=2000, batch_size=5, verbose=0)

# Make predictions
y_pred = final_model.predict(X_test)

# Calculate metrics
mse = mean_squared_error(y_test, y_pred)
mae = mean_absolute_error(y_test, y_pred)
evs = explained_variance_score(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

# Print metrics
print('Mean Squared Error:', mse)
print('Mean Absolute Error:', mae)
print('Explained Variance Score:', evs)
print('R^2 Score:', r2)

# Plotting actual vs. predicted values
plt.scatter(y_test, y_pred, color='blue', label='Actual vs. Predicted')
plt.plot([y.min(), y.max()], [y.min(), y.max()], '--k', color='red', label='Perfect prediction')
plt.title('Actual vs. Predicted Fuel Consumption (ANN)')
plt.xlabel('Actual Fuel Consumption')
plt.ylabel('Predicted Fuel Consumption')
plt.legend()
plt.show()
